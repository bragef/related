\name{related-package}
\alias{related-package}
\alias{related}
\docType{package}
\title{
related: an R package for analyzing pairwise relatedness based on codominant molecular markers.
}
\description{
Provides functions for calculating relatedness from codominant genetic data using any or all of seven estimators, and includes options for considering inbreeding and genotyping errors, and can estimate 95% confidence intervals.  Also includes simulation options for comparing the performance of different estimators on a given data set and estimating the expected resolution given a particular data set. Can also test hypotheses regarding relatedness patterns within pre-defined groups.
}
\details{
\tabular{ll}{
Package: \tab related\cr
Type: \tab Package\cr
Version: \tab 1.0\cr
Date: \tab 2015-03-20\cr
License: \tab GPL (>=2)\cr
}
A complete walk-through of the package and available options are available as a tutorial vignette, accessible from the CRAN website.

Important functions are summarized below.


=== READING DATA INTO R ===

Genotype data can be read into R using the \code{\link{readgenotypedata}} function. This will create an R data frame of the genotype data, and an R object with all of the allele frequency data, in a format appropriate for subsequent analyses.  The genotype file should have one column of individual identifiers and then 2 columns for each locus (one for each allele).  No other columns are allowed.  Missing data should be formatted as zeros ("0").  The file should NOT contain a header row.


=== ESTIMATING RELATEDNESS ===

Pairwise relatedness can be estimated, based on 7 different estimators, using the \code{\link{coancestry}} function.  The input is a data frame of genotypes, as generated by the \code{\link{readgenotypedata}} function. Relatedness estimation can include point estimates, 95\% confidence intervals, inbreeding, and genotyping errors.  The output will include a data frame of pairwise estimates, and separate data frames with data pertaining to confidence intervals and inbreeding coefficients, if selected.


===CONDUCTING SIMULATIONS ===

Simulations can be conducted in two different ways.  First, users can generate simulated individuals of known relatedness (parent-offspring, full-sib, half-sib, and unrelated), based on their allele frequency data, to assess how much resolution they can expect with the characteristics of their data.  This can be done using the \code{\link{familysim}} function, which takes the allele frequency object generated by the \code{\link{readgenotypedata}} function, as well as a whole number indicating the number of pairs to simulate for each relatedness value, as arguments.  Pairwise relatedness can then be estimated for these simulated individuals using the \code{\link{coancestry}} function.  This will generate relatedness values for \emph{all} pairs of individuals. However, we are only interested in the relatedness of \emph{specific pairs} (i.e., those representing known relatedness values).  Therefore, these results can be cleaned up using the \code{\link{cleanuprvals}} function.  The results will be a data frame of relatedness values of all simulated pairs of known relatedness, which can be subsequently analyzed or visualized using other R functions.

Second, users may want to know what relatedness estimator will perform best, given the characteristics of their data. We have created a function, called \code{\link{compareestimators}}, that will: (1) create simulated individuals of known relatedness from your allele frequency file; (2) calculate relatedness using the 4 most commonly used estimators; and (3) create a box plot using the \code{ggplot2} package so that the performance of each can be readily compared. 

===Analyzing Within-Group Relatedness ===

Sometimes it is desirable to test if individuals within groups are more related than expected if these just represent random groups of individuals. \code{related} has a function for testing this, called \code{\link{grouprel}}. What this function will do is calculate the average relatedness within each of the specified groups. It will then generate a distribution of 'expected' relatedness values by randomly shuffling individuals between groups, while keeping each group size constant, and calculating the average relatedness within each group for each randomization step. It will then generate plots comparing the observed and expected values. It also writes a file called "\code{observed-r.csv}", and another one called "\code{expectedrel.csv}" to your working directory, containing the observed and expected values, respectively, so that you can conduct further analyses of these data.
}
\author{
Original Fortran code: Jinliang Wang\\
R code and functions: Jack Pew and Tim Frasier

Maintainer: Tim Frasier <timothy.frasier@smu.ca>
}
\references{
Pew J, Muir P, Wang J, Frasier TR (\emph{in press}) related: an R package for analyzing pairwise relatedness data based on codominant molecular markers.

Wang J (2011) COANCESTRY: a program for simulting, estimating and analysing relatedness and inbreeding coefficients. \emph{Molecular Ecology Resources} 11: 141-145.
}
%~~ Optionally other standard keywords, one per line, from file KEYWORDS in ~~
%~~ the R documentation directory ~~
\keyword{ package }
\seealso{\code{\link{cleanuprvals}}, \code{\link{coancestry}}, \code{\link{compareestimators}}, \code{\link{familysim}}, \code{\link{grouprel}}, \code{\link{readgenotypedata}}
}
\examples{
	\dontrun{
		data(GenotypeData)

		#---Read data into R---#
		input <- readgenotypedata(GenotypeData)

		#---Compare relatedness estimators---#
		compareestimators(input, 100)

		#---Estimate relatedness---#
		rel <- coancestry(input$gdata, lynchli=1, lynchrd=1, quellergt=1, wang=1)

		#---Create simulated individuals of known relatedness---#
		sim <- familysim(input$freqs, 100)
    
    #----------------------------#
  	#  Within group analysis     #
		#----------------------------#
		
		#--- Read in genotype file ---#
		reldata <- readgenotypedata("simrel.txt")
		
		#--- Assess relatedness within groups ---#
		grouprel(genotypes = reldata$gdata, estimatorname = "wang", usedgroups = "all", iterations = 100)
    
	}	
}
